Write Up - Week 2


Explanation - 
Load Dictionary: The program parses each word line by line using getline, removing the newline character. It also lowercases the word for proper checking.
It uses the hash function to find the correct bucket, then inits or inserts into a linked list based on that hash.

Check Words - Check words uses getline again, and parses the lines using strtok, getting rid of all garbage characters (except ' which is a weird case). 
I decided to just discard words that begin with an apostrophe, but otherwise check them. It then checks each word, and if they return misspelled I put them into the misspelled array.

Check Word - I lowercase each word for checking and compare them to the dictionary. If the words isn't in the LL for it's hashed bucket, I return false as it is not in the dictionary.


Valgrind Output - (For a tale of two cities with the aspell word list)
valgrind ./spell_check wordlist.txt tale.txt 
==10082== Memcheck, a memory error detector
==10082== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10082== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10082== Command: ./spell_check wordlist.txt tale.txt
==10082== 
Mispelled: 1000
==10082== 
==10082== HEAP SUMMARY:
==10082==     in use at exit: 0 bytes in 0 blocks
==10082==   total heap usage: 265,027 allocs, 265,027 frees, 8,166,073 bytes allocated
==10082== 
==10082== All heap blocks were freed -- no leaks are possible
==10082== 
==10082== For counts of detected and suppressed errors, rerun with: -v
==10082== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

Bugs -
My code will likely incorrectly declare possesives (with apostrophes) as spelled incorrectly. It's unclear from the instructions whether this is or isn't a bug from the spec.
I had some memory leakage with regards to lowercasing each string improperly (was calling to_lower on NULLs), but that was fixed. I made sure of properly freeing all allocated memory.
I made sure not to use memory after freeing, or double freeing, and using printf formatting properly.


